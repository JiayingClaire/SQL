#1 Integer division

SQL assumes that if you divide an integer by an integer, you want to get an integer back, e.g. 5/3 -> 1.
So be careful when dividing! 

Solution 1:
Cast one of the integers to the desired type:
CAST (5 AS DOUBLE PRECISION) / 3

Solution 2:
Add decimal places to the numbers, e.g. SELECT (4.0 / 3.0) AS result;
When you're dividing, make sure at least one of the numbers has a decimal place.
Another example: using SELECT 45 * 100.0 / 10; instead of SELECT 45 / 10 * 100.0;

#2 The HAVING function

In SQL, aggregate functions can't be used in WHERE clauses. 

For example, the following query is invalid:
SELECT release_year
FROM films
GROUP BY release_year
WHERE COUNT(title) > 10;

That's where the HAVING clause comes in. 
For example:
SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;

#3 Use varchar type instead of the char type

When comparing a char type with a varchar type, one may expect extra spaces to be added to the varchar type 
to make the lengths equal, before comparison. Hhowever, this may or may not be done, depending on the database system. 
As a result, even if the same value “Avi” is stored in the attributes A and B above, a comparison A=B may return false. 
Thus, always use the varchar type instead of the char type to avoid these problems.

# NULL values in WHERE clause

AND
true AND NULL -> NULL
false AND NULL -> false
NULL AND NULL -> NULL 

OR
true OR NULL -> true
false OR NULL -> NULL
NULL OR NULL -> NULL 

NOT
NOT NULL -> NULL

# Data Type for some variables:
phone_number  VARCHAR(15)
loan_number   VARCHAR(25)
You orginially thought they should be INT, while phone_number will be sth, like +001646...., and loan_number like ACC-123-746

# SELECT more
Think twice when you type the SELECT statement:

Provide the SQL statement that returns the total number of movies for each rental rate.

Your answer:
SELECT COUNT(title)
FROM film
GROUP BY rental_rate;

Suggested answer:
SELECT rental_rate, COUNT(*)
FROM film
GROUP BY rental_rate;

Note that you need to print the "rental_rate" and map the count with it.

# Using DISTINCT with JOIN
question1: find the unique ID in Table1 but not in Table2.
solution: 
SELECT DISTINCT Table1.ID
FROM Table1 JOIN Table2
ON Table1.ID = Table2.ID
WHERE Table2.ID = NULL

question2: how many students are in both Table1 and Table2?
solution:
SELECT COUNT (DISTINCT *) AS total_count # don't forget to give a name for the new column!
FROM Table1 INNER JOIN Table2
ON Table1.ID = Table2.ID

# COUNT DISTINCT without using DISTINCT
SELECT (*) FROM
  (SELECT name FROM table GROUP BY name);
  
# Difference between CTE and TEMP TABLE:
CTE is common table expression. It helps to make the queries more readable. But CTE does not store data.
TEMP TABLE is copy the content in the selected table and create a temp table to store the content for future use.
It also simplify the queries with many many subqueries.

# When there's more than one JOIN:
SELECT sports_category, COUNT(DISTINCT user_id_following) AS count_follower # don't forget to give a name here!
FROM t1 
LEFT JOIN t2 ON t1.user_name = t2.user_name
LEFT JOIN t3 ON t2.sports_category = t3.sports_category
GROUP BY sports_category

# How to geneate row number without window function
SELECT m1.member_id, m1.email, COUNT (*) AS row_number
FROM member m1 JOIN member m2
ON m1.member_id = m2.member_id
AND m1.email >= m2.email
GROUP BY member_id, email;

# Select only the transactions happened during weekends:
1) SELECT some_columns
FROM some_dataset
WHERE EXTRACT(ISODOW FROM date) IN (6, 7) 
-- returns a boolean 
-- 6 represents Sat, 7 represents Sun

2) SELECT some_columns
FROM some_dataset
WHERE datename(weekday, Date) in ('Saturday', 'Sunday’)

# Three ways to select the n-highest number of row
# (e.g. n=1000)
1) by TOP/ LIMIT function

SELECT spend
FROM (
SELECT spend FROM order_table
ORDER BY spend DESC
LIMIT 1000)
ORDER BY spend
LIMIT 1;

# The limitation of this method is that if two rows have the same spend, they should be the same highest spend,
# while LIMIT 1 will only show one of the result.

2) by window function - ROW_NUMBER() OVER keyword

SELECT spend , FROM (
SELECT spend , ROW_NUMBER() OVER( ORDER BY spend DESC) AS spend_rank
FROM order_table)
WHERE spend_rank = 1000;

# Use ROW_NUMBER() instead of RANK(), because only in that way can we find the 1000th row for sure.

3) by JOIN function

SELECT ot1.id, ot2.spend
FROM order_table ot1
JOIN order_table ot2
ON ot1.spend <= ot2.spend   -- this step is like ordering
GROUP BY ot1.id, ot2.spend
HAVING COUNT(*) = 1000;

# JOIN = INNER JOIN

# DON'T MISS UP!
Select all records where the City column is NOT the value "Berlin":
WRONG: SELECT * FROM XXX WHERE city != 'Berlin';
CORRECT: SELECT * FROM XXX WHERE city <> 'Berlin';


